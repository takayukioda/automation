#!/bin/bash
# If not running interactively, don't do anything
[ -z "$PS1" ] && return

: "history" && {
	HISTCONTROL=ignoreboth
	HISTSIZE=5000
	HISTFILESIZE=10000
}

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# brew --prefix: /usr/local
readonly BREW_PREFIX=/usr/local

: "completion" && {
	if [ -f $BREW_PREFIX/etc/bash_completion ] && ! shopt -oq posix; then
		. $BREW_PREFIX/etc/bash_completion
	fi

	if [ -d $BREW_PREFIX/etc/bash_completion.d ] && ! shopt -oq posix; then
		COMPLETION_DIR=$BREW_PREFIX/etc/bash_completion.d
		[ -f $COMPLETION_DIR/git-completion.bash ] && . $COMPLETION_DIR/git-completion.bash
		[ -f $COMPLETION_DIR/aws_bash_completer ] && . $COMPLETION_DIR/aws_bash_completer
	fi
}

# brew --prefix bash-git-prompt: /usr/local/opt/bash-git-prompt
: "git prompt" && {
	if [ -f "$BREW_PREFIX/opt/git/etc/bash_completion.d/git-prompt.sh" ]; then
		# GIT_PROMPT_THEME=Default
		. "$BREW_PREFIX/opt/git/etc/bash_completion.d/git-prompt.sh"
	elif [ -f "$BREW_PREFIX/opt/bash-git-prompt/share/git-prompt.sh" ]; then
		# GIT_PROMPT_THEME=Default
		. "$BREW_PREFIX/opt/bash-git-prompt/share/git-prompt.sh"
	fi
	[ $(type -t __git_ps1) ] && gitps1="__git_ps1"
}

: "prompt" && {
	# assume we have color support
	PS1='\[\e]0;\w\a\]\[\e[33m\]\w\[\e[35m\]$(${gitps1})\n\[\e[36m\]\D{%m-%d %R} \[\e[32m\]\u@\h\[\e[0m\] \$ '
	case ${TERM} in
		eterm-color | dumb )
			PS1='\w$(${gitps1})\n\D{%R} \u@\h \$ '
			;;
		linux )
			export LC_CTYPE=C
			export LANG=C
			PS1='\[\e[33m\]\w\[\e[35m\]$(${gitps1})\n\[\e[36m\]\D{%R} \[\e[32m\]\u@\h\[\e[0m\] \$ '
			;;
		screen | xterm )
			TERM=xterm-256color
			;;
		* ) ;;
	esac
}

: "rust" && {
	[ -f ${HOME}/.cargo/env ] && . ${HOME}/.cargo/env
}

: "exports" && {
	: "basic" && {
		export EDITOR=vim
		export PAGER='less -gMj2r'
		[ "$LC_CTYPE" = 'UTF-8' ] && export LC_CTYPE='en_US.UTF-8'
		[ -z "$LANG" ] && export LANG='en_US.UTF-8'

		: "prompt" && {
			export TERM
			export PS1
		}
	}

	: "aws" && {
		export AWS_DEFAULT_PROFILE=codecheck
	}
}

: "alias" && {
	[ -r ${HOME}/.bash_alias ] && . ${HOME}/.bash_alias
}

: "functions" && {
	__peco_history__() {
		# focused on getting unique command list
		# sed -E 's/^ +[0-9]+\*? *//' <(history) | sort | uniq | peco --prompt "HISTORY>"

		# focused on going back history even commands are duplicated
		# `tar -r` for reversing the all lines
		# note: `-r` option in tail command is only available on mac
		sed -E 's/^ *[0-9]+\*? *//' <(history) | tail -r | peco --prompt "HISTORY>"
	}
	bind '"\C-r": "\C-e\C-u`__peco_history__`\e\C-e\e^"'

	finco() {
		local ext=${1:-''}
		local dir=${2:-.}
		find ${dir} -name "*${ext}" | peco --prompt "${ext:-FILE}>"
	}

	__peco_github__() {
		find ${HOME}/github.com -type d -maxdepth 2 | peco --prompt "PROJECT>"
	}

	pd() {
		local jump_to=$(__peco_github__)
		cd ${jump_to:-.}
	}

	__peco_go__() {
		find -L ${HOME}/go/src -type d -maxdepth 3 | peco --prompt "GO>"
	}
	gd() {
		cd $(__peco_go__)
	}


	mkpasswd() {
		LC_CTYPE=C </dev/urandom tr -dc '_A-Z-a-z-0-9!@#$%^&*/=+.,-' | head -c ${1:-16}; echo ""
	}

	clone () {
		readonly local HOST=${3:-github.com}
		readonly local ACCOUNT=${2:-takayukioda}
		readonly local REPOSITORY=${1}

		readonly local PROJECT_ROOT=${HOME}/${HOST}

		if [ ! -d ${ACCOUNT} ]; then
			echo "Creating account directory ${ACCOUNT}"
			mkdir -p ${PROJECT_ROOT}/${ACCOUNT}
		fi
		if [ -d ${REPOSITORY} ]; then
			echo "Repository already cloned"
			return
		fi

		cd ${PROJECT_ROOT}/${ACCOUNT}

		git clone ${HOST}:${ACCOUNT}/${REPOSITORY}.git && \
			echo "${ACCOUNT}/${REPOSITORY} has been cloned :)"
	}

	github() {
		local where=$1
		local number=$2
		local repo=$(pwd | grep -E --only-match 'github.com/[^/]*/[^/]*')
		[ -z "$repo" ] && echo "pwd does not match with github url" >&2 && return
		case "${where}" in
			"issue"|"issues")
				if [ -z "${number}" ]; then
					echo "opening https://${repo}/issues" && open -a safari "https://${repo}/issues"
				else 
					echo "opening https://${repo}/issues/${number}" && open -a safari "https://${repo}/issues/${number}"
				fi
				;;
			"pull"|"pulls")
				if [ -z "${number}" ]; then
					echo "opening https://${repo}/pulls" && open -a safari "https://${repo}/pulls"
				else 
					echo "opening https://${repo}/pull/${number}" && open -a safari "https://${repo}/pull/${number}"
				fi
				;;
			*)
				echo "opening https://${repo}" && open -a safari "https://${repo}"
				;;
		esac
	}
}

: "load direnv" && {
	eval "$(direnv hook bash)"
}
